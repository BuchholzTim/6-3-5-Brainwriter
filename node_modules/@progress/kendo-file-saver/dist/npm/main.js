'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function saveAs(data, fileName, options) {
  if ( options === void 0 ) options = {};

  var save = postToProxy;

  if (options.forceProxy && !options.proxyURL) {
    throw new Error('No proxyURL is set, but forceProxy is true');
  }

  if (!options.forceProxy) {
    if (canDownload()) {
      save = saveAsDataURI;
    }

    if (navigator.msSaveBlob) {
      save = saveAsBlob;
    }
  }

  save(data, fileName, options);
}

var anchor = function () { return document.createElement('a'); };
var canDownload = function () { return 'download' in anchor(); };

function saveAsBlob(data, fileName) {
  var blob = data; // could be a Blob object

  if (typeof data === 'string') {
    var parts = data.split(';base64,');
    var contentType = parts[0];
    var base64 = atob(parts[1]);
    var array = new Uint8Array(base64.length);

    for (var idx = 0; idx < base64.length; idx++) {
      array[idx] = base64.charCodeAt(idx);
    }

    blob = new Blob([ array.buffer ], { type: contentType });
  }

  navigator.msSaveBlob(blob, fileName);
}

function saveAsDataURI(data, fileName) {
  var dataURI = data;
  if (window.Blob && data instanceof Blob) {
    dataURI = URL.createObjectURL(data);
  }

  var fileSaver = anchor();
  fileSaver.download = fileName;
  fileSaver.href = dataURI;

  var e = document.createEvent('MouseEvents');
  e.initMouseEvent('click', true, false, window,
  0, 0, 0, 0, 0, false, false, false, false, 0, null);

  fileSaver.dispatchEvent(e);
  setTimeout(function () { return URL.revokeObjectURL(dataURI); });
}

function postToProxy(dataURI, fileName, options) {
  if (!options.proxyURL) {
    return;
  }

  var form = document.createElement('form');
  form.setAttribute('action', options.proxyURL);
  form.setAttribute('method', 'POST');
  form.setAttribute('target', options.proxyTarget || '_self');

  var formData = options.proxyData || {};
  formData.fileName = fileName;

  var parts = dataURI.split(";base64,");
  formData.contentType = parts[0].replace("data:", "");
  formData.base64 = parts[1];

  for (var name in formData) {
    if (formData.hasOwnProperty(name)) {
      var input = document.createElement('input');
      input.setAttribute('type', 'hidden');
      input.setAttribute('name', name);
      input.setAttribute('value', formData[name]);

      form.appendChild(input);
    }
  }

  document.body.appendChild(form);
  form.submit();
  document.body.removeChild(form);
}

var KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var fromCharCode = String.fromCharCode;

function encodeBase64(plainText) {
  var input = encodeUTF8(plainText);
  var output = "";
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
  var i = 0;

  while (i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    enc1 = chr1 >> 2;
    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
    enc4 = chr3 & 63;

    if (isNaN(chr2)) {
      enc3 = enc4 = 64;
    } else if (isNaN(chr3)) {
      enc4 = 64;
    }

    output = output +
      KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) +
      KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
  }

  return output;
}

function encodeUTF8(input) {
  var output = "";

  for (var i = 0; i < input.length; i++) {
    var c = input.charCodeAt(i);

    if (c < 0x80) {
      // One byte
      output += fromCharCode(c);
    } else if (c < 0x800) {
      // Two bytes
      output += fromCharCode(0xC0 | (c >>> 6));
      output += fromCharCode(0x80 | (c & 0x3f));
    } else if (c < 0x10000) {
      // Three bytes
      output += fromCharCode(0xE0 | (c >>> 12));
      output += fromCharCode(0x80 | (c >>> 6 & 0x3f));
      output += fromCharCode(0x80 | (c & 0x3f));
    }
  }

  return output;
}

exports.saveAs = saveAs;
exports.encodeBase64 = encodeBase64;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZmlsZS1zYXZlci9zcmMvc2F2ZS1hcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tZmlsZS1zYXZlci9zcmMvYmFzZTY0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzYXZlQXMoZGF0YSwgZmlsZU5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgc2F2ZSA9IHBvc3RUb1Byb3h5O1xuXG4gIGlmIChvcHRpb25zLmZvcmNlUHJveHkgJiYgIW9wdGlvbnMucHJveHlVUkwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHByb3h5VVJMIGlzIHNldCwgYnV0IGZvcmNlUHJveHkgaXMgdHJ1ZScpO1xuICB9XG5cbiAgaWYgKCFvcHRpb25zLmZvcmNlUHJveHkpIHtcbiAgICBpZiAoY2FuRG93bmxvYWQoKSkge1xuICAgICAgc2F2ZSA9IHNhdmVBc0RhdGFVUkk7XG4gICAgfVxuXG4gICAgaWYgKG5hdmlnYXRvci5tc1NhdmVCbG9iKSB7XG4gICAgICBzYXZlID0gc2F2ZUFzQmxvYjtcbiAgICB9XG4gIH1cblxuICBzYXZlKGRhdGEsIGZpbGVOYW1lLCBvcHRpb25zKTtcbn1cblxuY29uc3QgYW5jaG9yID0gKCkgPT4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuY29uc3QgY2FuRG93bmxvYWQgPSAoKSA9PiAnZG93bmxvYWQnIGluIGFuY2hvcigpO1xuXG5mdW5jdGlvbiBzYXZlQXNCbG9iKGRhdGEsIGZpbGVOYW1lKSB7XG4gIGxldCBibG9iID0gZGF0YTsgLy8gY291bGQgYmUgYSBCbG9iIG9iamVjdFxuXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBwYXJ0cyA9IGRhdGEuc3BsaXQoJztiYXNlNjQsJyk7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBwYXJ0c1swXTtcbiAgICBjb25zdCBiYXNlNjQgPSBhdG9iKHBhcnRzWzFdKTtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBVaW50OEFycmF5KGJhc2U2NC5sZW5ndGgpO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYmFzZTY0Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIGFycmF5W2lkeF0gPSBiYXNlNjQuY2hhckNvZGVBdChpZHgpO1xuICAgIH1cblxuICAgIGJsb2IgPSBuZXcgQmxvYihbIGFycmF5LmJ1ZmZlciBdLCB7IHR5cGU6IGNvbnRlbnRUeXBlIH0pO1xuICB9XG5cbiAgbmF2aWdhdG9yLm1zU2F2ZUJsb2IoYmxvYiwgZmlsZU5hbWUpO1xufVxuXG5mdW5jdGlvbiBzYXZlQXNEYXRhVVJJKGRhdGEsIGZpbGVOYW1lKSB7XG4gIGxldCBkYXRhVVJJID0gZGF0YTtcbiAgaWYgKHdpbmRvdy5CbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgZGF0YVVSSSA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZGF0YSk7XG4gIH1cblxuICBjb25zdCBmaWxlU2F2ZXIgPSBhbmNob3IoKTtcbiAgZmlsZVNhdmVyLmRvd25sb2FkID0gZmlsZU5hbWU7XG4gIGZpbGVTYXZlci5ocmVmID0gZGF0YVVSSTtcblxuICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gIGUuaW5pdE1vdXNlRXZlbnQoJ2NsaWNrJywgdHJ1ZSwgZmFsc2UsIHdpbmRvdyxcbiAgMCwgMCwgMCwgMCwgMCwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuXG4gIGZpbGVTYXZlci5kaXNwYXRjaEV2ZW50KGUpO1xuICBzZXRUaW1lb3V0KCgpID0+IFVSTC5yZXZva2VPYmplY3RVUkwoZGF0YVVSSSkpO1xufVxuXG5mdW5jdGlvbiBwb3N0VG9Qcm94eShkYXRhVVJJLCBmaWxlTmFtZSwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMucHJveHlVUkwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICBmb3JtLnNldEF0dHJpYnV0ZSgnYWN0aW9uJywgb3B0aW9ucy5wcm94eVVSTCk7XG4gIGZvcm0uc2V0QXR0cmlidXRlKCdtZXRob2QnLCAnUE9TVCcpO1xuICBmb3JtLnNldEF0dHJpYnV0ZSgndGFyZ2V0Jywgb3B0aW9ucy5wcm94eVRhcmdldCB8fCAnX3NlbGYnKTtcblxuICBjb25zdCBmb3JtRGF0YSA9IG9wdGlvbnMucHJveHlEYXRhIHx8IHt9O1xuICBmb3JtRGF0YS5maWxlTmFtZSA9IGZpbGVOYW1lO1xuXG4gIGNvbnN0IHBhcnRzID0gZGF0YVVSSS5zcGxpdChcIjtiYXNlNjQsXCIpO1xuICBmb3JtRGF0YS5jb250ZW50VHlwZSA9IHBhcnRzWzBdLnJlcGxhY2UoXCJkYXRhOlwiLCBcIlwiKTtcbiAgZm9ybURhdGEuYmFzZTY0ID0gcGFydHNbMV07XG5cbiAgZm9yIChsZXQgbmFtZSBpbiBmb3JtRGF0YSkge1xuICAgIGlmIChmb3JtRGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2hpZGRlbicpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKCduYW1lJywgbmFtZSk7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgZm9ybURhdGFbbmFtZV0pO1xuXG4gICAgICBmb3JtLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICB9XG4gIH1cblxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuICBmb3JtLnN1Ym1pdCgpO1xuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGZvcm0pO1xufVxuXG4iLCJjb25zdCBLRVlfU1RSID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwiO1xuY29uc3QgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUJhc2U2NChwbGFpblRleHQpIHtcbiAgY29uc3QgaW5wdXQgPSBlbmNvZGVVVEY4KHBsYWluVGV4dCk7XG4gIGxldCBvdXRwdXQgPSBcIlwiO1xuICBsZXQgY2hyMSwgY2hyMiwgY2hyMywgZW5jMSwgZW5jMiwgZW5jMywgZW5jNDtcbiAgbGV0IGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgaW5wdXQubGVuZ3RoKSB7XG4gICAgY2hyMSA9IGlucHV0LmNoYXJDb2RlQXQoaSsrKTtcbiAgICBjaHIyID0gaW5wdXQuY2hhckNvZGVBdChpKyspO1xuICAgIGNocjMgPSBpbnB1dC5jaGFyQ29kZUF0KGkrKyk7XG5cbiAgICBlbmMxID0gY2hyMSA+PiAyO1xuICAgIGVuYzIgPSAoKGNocjEgJiAzKSA8PCA0KSB8IChjaHIyID4+IDQpO1xuICAgIGVuYzMgPSAoKGNocjIgJiAxNSkgPDwgMikgfCAoY2hyMyA+PiA2KTtcbiAgICBlbmM0ID0gY2hyMyAmIDYzO1xuXG4gICAgaWYgKGlzTmFOKGNocjIpKSB7XG4gICAgICBlbmMzID0gZW5jNCA9IDY0O1xuICAgIH0gZWxzZSBpZiAoaXNOYU4oY2hyMykpIHtcbiAgICAgIGVuYzQgPSA2NDtcbiAgICB9XG5cbiAgICBvdXRwdXQgPSBvdXRwdXQgK1xuICAgICAgS0VZX1NUUi5jaGFyQXQoZW5jMSkgKyBLRVlfU1RSLmNoYXJBdChlbmMyKSArXG4gICAgICBLRVlfU1RSLmNoYXJBdChlbmMzKSArIEtFWV9TVFIuY2hhckF0KGVuYzQpO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gZW5jb2RlVVRGOChpbnB1dCkge1xuICBsZXQgb3V0cHV0ID0gXCJcIjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgYyA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XG5cbiAgICBpZiAoYyA8IDB4ODApIHtcbiAgICAgIC8vIE9uZSBieXRlXG4gICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKGMpO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAvLyBUd28gYnl0ZXNcbiAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHhDMCB8IChjID4+PiA2KSk7XG4gICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoYyAmIDB4M2YpKTtcbiAgICB9IGVsc2UgaWYgKGMgPCAweDEwMDAwKSB7XG4gICAgICAvLyBUaHJlZSBieXRlc1xuICAgICAgb3V0cHV0ICs9IGZyb21DaGFyQ29kZSgweEUwIHwgKGMgPj4+IDEyKSk7XG4gICAgICBvdXRwdXQgKz0gZnJvbUNoYXJDb2RlKDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpKTtcbiAgICAgIG91dHB1dCArPSBmcm9tQ2hhckNvZGUoMHg4MCB8IChjICYgMHgzZikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4iXSwibmFtZXMiOlsibGV0IiwiY29uc3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQVksRUFBRTttQ0FBUCxHQUFHLEVBQUU7O0VBQ2pEQSxJQUFJLElBQUksR0FBRyxXQUFXLENBQUM7O0VBRXZCLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7SUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO0dBQy9EOztFQUVELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO0lBQ3ZCLElBQUksV0FBVyxFQUFFLEVBQUU7TUFDakIsSUFBSSxHQUFHLGFBQWEsQ0FBQztLQUN0Qjs7SUFFRCxJQUFJLFNBQVMsQ0FBQyxVQUFVLEVBQUU7TUFDeEIsSUFBSSxHQUFHLFVBQVUsQ0FBQztLQUNuQjtH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